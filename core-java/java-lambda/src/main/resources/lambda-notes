-------------------- Lambda Notes -----------------
https://www.youtube.com/watch?v=q5i_O4Uj_O8


- Lambda is a library to introduce functinal programing in Java SE8. Lambda expressions are just a way of passing
  a block of code to the function. That is all there is to it.

-------------------------------- New Interface Features in SE8------------------------------
Interface can now contain default implementations inherited by implementing classes
No need for helper classes like Collections that work with classes that implement 
Collection interface and provides static methods common to them. They can now be implemented in the 
interface

--------------------------------- Functional Interface ----------------------
Any interface with just one abstract method is the functional interface: Runnable, Comparator etc.

--- Look for the syntax of Lambda expression in App class.

--------------------------------------- Streams -----------------------------------------

Streams provide a view of data that lets you specify computations at a higher conceptual level 
than with collections. 

• You can create streams from collections, arrays, generators, or iterators.

• Use filter to select elements and map to transform elements.

• Other operations for transforming streams include limit, distinct, and sorted.


 -- Doing with iteration:
		    int count = 0;
		    for (String w : words) {
		    if (w.length() > 12) count++;
		    }
		    
---- Doing without iteration with stream:
    long count = words.stream().filter(w -> w.length() > 12).count();
    
    long count = words.parallelStream()
    .filter(w -> w.length() > 12)
    .count();
    
    
 ----------------------------------- Constructing Streams------------------------------
 From Arrays:
   Stream<String> song = Stream.of("gently", "down", "the", "stream");
   Stream<String> echos = Stream.generate(() -> "Echo");
   
   Or Stream of Random Numbers:
   Stream<Double> randoms = Stream.generate(Math::random);
   
   Stream<BigInteger> integers
    = Stream.iterate(BigInteger.ZERO, n -> n.add(BigInteger.ONE));
    
------------------------ Applying Filter On A Stream -----------------------------
filter transformation that yields a new stream with those elements that match a certain condition. Here, we transform a stream of strings into another 
stream containing only long words:

			List<String> words = ...;
			Stream<String> longWords = words.stream().filter(w -> w.length() > 12);

   The argument of filter is a Predicate<T>—that is, a function from T to boolean.
   
   
   ------------------------------- Pipelines And Streams ----------------------------------
   A pipeline is a sequence of aggregate operations. The following example prints the male members contained in the collection roster with a pipeline that consists of the aggregate operations filter and forEach:

					roster
					    .stream()
					    .filter(e -> e.getGender() == Person.Sex.MALE)
					    .forEach(e -> System.out.println(e.getName()));
					Compare this example to the following that prints the male members contained in the collection roster with a for-each loop:
					
					for (Person p : roster) {
					    if (p.getGender() == Person.Sex.MALE) {
					        System.out.println(p.getName());
					    }
					}
A pipeline contains the following components:

A source: This could be a collection, an array, a generator function, or an I/O channel. In this example, the source is the collection roster.

Zero or more intermediate operations. An intermediate operation, such as filter, produces a new stream.

A stream is a sequence of elements. Unlike a collection, it is not a data structure that stores elements. Instead, a stream carries values from a source through a pipeline. This example creates a stream from the collection roster by invoking the method stream.

The filter operation returns a new stream that contains elements that match its predicate (this operation's parameter). In this example, the predicate is the lambda expression e -> e.getGender() == Person.Sex.MALE. It returns the boolean value true if the gender field of object e has the value Person.Sex.MALE. Consequently, the filter operation in this example returns a stream that contains all male members in the collection roster.

A terminal operation. A terminal operation, such as forEach, produces a non-stream result, such as a primitive value (like a double value), a collection, or in the case of forEach, no value at all. In this example, the parameter of the forEach operation is the lambda expression e -> System.out.println(e.getName()), which invokes the method getName on the object e. (The Java runtime and compiler infer that the type of the object e is Person.)

The following example calculates the average age of all male members contained in the collection roster with a pipeline that consists of the aggregate operations filter, mapToInt, and average:

					double average = roster
					    .stream()
					    .filter(p -> p.getGender() == Person.Sex.MALE)
					    .mapToInt(Person::getAge)
					    .average()
					    .getAsDouble();
The mapToInt operation returns a new stream of type IntStream (which is a stream that contains only integer values). The operation applies the function specified in its parameter to each element in a particular stream. In this example, the function is Person::getAge, which is a method reference that returns the age of the member. (Alternatively, you could use the lambda expression e -> e.getAge().) Consequently, the mapToInt operation in this example returns a stream that contains the ages of all male members in the collection roster.

The average operation calculates the average value of the elements contained in a stream of type IntStream. It returns an object of type OptionalDouble. If the stream contains no elements, then the average operation returns an empty instance of OptionalDouble, and invoking the method getAsDouble throws a NoSuchElementException. The JDK contains many terminal operations such as average that return one value by combining the contents of a stream. These operations are called reduction operations; see the section Reduction for more information.
    

